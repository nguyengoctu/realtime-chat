version: '3.8'

services:
  chat-app-common:
    build:
      context: ./chat-app-common
      dockerfile: Dockerfile
    container_name: chat-app-common-build
    volumes:
      - maven-repo:/root/.m2/repository

  mysql:
    image: mysql:8.0
    container_name: chat-app-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${DB_NAME:-chatapp_users}
      MYSQL_USER: ${DB_USERNAME:-chatapp}
      MYSQL_PASSWORD: ${DB_PASSWORD:-chatapp123}
    ports:
      - "${DB_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - chat-app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  flyway:
    build:
      context: .
      dockerfile: flyway/Dockerfile
    container_name: chat-app-flyway
    depends_on:
      mysql:
        condition: service_healthy
    command: -url=jdbc:mysql://mysql:3306/${DB_NAME:-chatapp_users} -user=${DB_USERNAME:-chatapp} -password=${DB_PASSWORD:-chatapp123} -connectRetries=60 migrate
    networks:
      - chat-app-network

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: chat-app-api-gateway
    restart: unless-stopped
    depends_on:
      - user-service
    volumes:
      - maven-repo:/root/.m2/repository
    ports:
      - "${API_GATEWAY_PORT:-9080}:9080"
    environment:
      - JWT_SECRET=${JWT_SECRET:-mySecretKey123456789012345678901234567890}
      - USER_SERVICE_URL=http://user-service:8081
    networks:
      - chat-app-network

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: chat-app-user-service
    restart: unless-stopped
    depends_on:
      - flyway
      - chat-app-common
      - minio
    volumes:
      - maven-repo:/root/.m2/repository
    environment:
      - DB_NAME=${DB_NAME:-chatapp_users}
      - DB_USERNAME=${DB_USERNAME:-chatapp}
      - DB_PASSWORD=${DB_PASSWORD:-chatapp123}
      - JWT_SECRET=${JWT_SECRET:-mySecretKey123456789012345678901234567890}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT:-http://minio:9000}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-minioadmin}
      - MINIO_BUCKET_AVATARS=${MINIO_BUCKET_AVATARS:-avatars}
    networks:
      - chat-app-network

  chat-app:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    container_name: chat-app-frontend
    restart: unless-stopped
    depends_on:
      - api-gateway
    environment:
      - NODE_ENV=production
      - APP_URL=${APP_URL:-http://localhost}
      - API_GATEWAY_URL=http://api-gateway:9080
      - API_GATEWAY_PORT=${API_GATEWAY_PORT:-9080}
    networks:
      - chat-app-network

  minio:
    image: minio/minio:latest
    container_name: chat-app-minio
    restart: unless-stopped
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY:-minioadmin}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - chat-app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  mysql_data:
  maven-repo:
  minio_data:

networks:
  chat-app-network:
    driver: bridge
